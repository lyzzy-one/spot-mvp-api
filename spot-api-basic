from fastapi import FastAPI, HTTPException
from typing import List
from models import SpotCreate, Spot, SpotList, UserCreate, User, BookmarkCreate, Bookmark

app = FastAPI(
    title="SPOT MVP API",
    description="Location bookmarking & sharing â€“ super minimal MVP API",
    version="0.1.0",
)


USERS: List[User] = []
SPOTS: List[Spot] = []
BOOKMARKS: List[Bookmark] = []
_uid = 1
_sid = 1
_bid = 1

@app.get("/health", tags=["System"])
def health():
    return {"ok": True}


@app.post("/users", response_model=User, tags=["Users"])
def create_user(body: UserCreate):
    global _uid
    user = User(id=_uid, **body.dict())
    USERS.append(user)
    _uid += 1
    return user

@app.get("/users", response_model=List[User], tags=["Users"])
def list_users():
    return USERS


@app.post("/spots", response_model=Spot, tags=["Spots"])
def create_spot(body: SpotCreate):
    global _sid
    spot = Spot(id=_sid, **body.dict())
    SPOTS.append(spot)
    _sid += 1
    return spot

@app.get("/spots", response_model=SpotList, tags=["Spots"])
def list_spots(category: str | None = None):
    items = SPOTS if not category else [s for s in SPOTS if s.category == category]
    return {"items": items}

@app.get("/spots/{spot_id}", response_model=Spot, tags=["Spots"])
def get_spot(spot_id: int):
    for s in SPOTS:
        if s.id == spot_id:
            return s
    raise HTTPException(status_code=404, detail="Spot not found")


@app.post("/bookmarks", response_model=Bookmark, tags=["Bookmarks"])
def create_bookmark(body: BookmarkCreate):
    global _bid
    if not any(u.id == body.user_id for u in USERS):
        raise HTTPException(400, "Invalid user_id")
    if not any(s.id == body.spot_id for s in SPOTS):
        raise HTTPException(400, "Invalid spot_id")
    bm = Bookmark(id=_bid, **body.dict())
    BOOKMARKS.append(bm)
    _bid += 1
    return bm

@app.get("/bookmarks", response_model=List[Bookmark], tags=["Bookmarks"])
def list_bookmarks(user_id: int | None = None):
    return [b for b in BOOKMARKS if (user_id is None or b.user_id == user_id)]
